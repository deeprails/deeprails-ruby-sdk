# frozen_string_literal: true

module Deeprails
  module Resources
    class Monitor
      # Use this endpoint to create a new monitor to evaluate model inputs and outputs
      # using guardrails
      #
      # @overload create(name:, description: nil, request_options: {})
      #
      # @param name [String] Name of the new monitor.
      #
      # @param description [String] Description of the new monitor.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::APIResponse]
      #
      # @see Deeprails::Models::MonitorCreateParams
      def create(params)
        parsed, options = Deeprails::MonitorCreateParams.dump_request(params)
        @client.request(
          method: :post,
          path: "monitor",
          body: parsed,
          model: Deeprails::APIResponse,
          options: options
        )
      end

      # Use this endpoint to retrieve the details and evaluations associated with a
      # specific monitor
      #
      # @overload retrieve(monitor_id, limit: nil, request_options: {})
      #
      # @param monitor_id [String] The ID of the monitor to retrieve.
      #
      # @param limit [Integer] Limit the returned events associated with this monitor. Defaults to 10.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::MonitorRetrieveResponse]
      #
      # @see Deeprails::Models::MonitorRetrieveParams
      def retrieve(monitor_id, params = {})
        parsed, options = Deeprails::MonitorRetrieveParams.dump_request(params)
        @client.request(
          method: :get,
          path: ["monitor/%1$s", monitor_id],
          query: parsed,
          model: Deeprails::Models::MonitorRetrieveResponse,
          options: options
        )
      end

      # Some parameter documentations has been truncated, see
      # {Deeprails::Models::MonitorUpdateParams} for more details.
      #
      # Use this endpoint to update the name, description, or status of an existing
      # monitor
      #
      # @overload update(monitor_id, description: nil, monitor_status: nil, name: nil, request_options: {})
      #
      # @param monitor_id [String] The ID of the monitor to edit.
      #
      # @param description [String] Description of the monitor.
      #
      # @param monitor_status [Symbol, Deeprails::Models::MonitorUpdateParams::MonitorStatus] Status of the monitor. Can be `active` or `inactive`. Inactive monitors no lon
      #
      # @param name [String] Name of the monitor.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::APIResponse]
      #
      # @see Deeprails::Models::MonitorUpdateParams
      def update(monitor_id, params = {})
        parsed, options = Deeprails::MonitorUpdateParams.dump_request(params)
        @client.request(
          method: :put,
          path: ["monitor/%1$s", monitor_id],
          body: parsed,
          model: Deeprails::APIResponse,
          options: options
        )
      end

      # Some parameter documentations has been truncated, see
      # {Deeprails::Models::MonitorSubmitEventParams} for more details.
      #
      # Use this endpoint to submit a model input and output pair to a monitor for
      # evaluation
      #
      # @overload submit_event(monitor_id, guardrail_metrics:, model_input:, model_output:, model_used: nil, nametag: nil, run_mode: nil, request_options: {})
      #
      # @param monitor_id [String] The ID of the monitor associated with this event.
      #
      # @param guardrail_metrics [Array<Symbol, Deeprails::Models::MonitorSubmitEventParams::GuardrailMetric>] An array of guardrail metrics that the model input and output pair will be evalu
      #
      # @param model_input [Deeprails::Models::MonitorSubmitEventParams::ModelInput] A dictionary of inputs sent to the LLM to generate output. This must contain a
      #
      # @param model_output [String] Output generated by the LLM to be evaluated.
      #
      # @param model_used [String] Model ID used to generate the output, like `gpt-4o` or `o3`.
      #
      # @param nametag [String] An optional, user-defined tag for the event.
      #
      # @param run_mode [Symbol, Deeprails::Models::MonitorSubmitEventParams::RunMode] Run mode for the monitor event. The run mode allows the user to optimize for sp
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::MonitorSubmitEventResponse]
      #
      # @see Deeprails::Models::MonitorSubmitEventParams
      def submit_event(monitor_id, params)
        parsed, options = Deeprails::MonitorSubmitEventParams.dump_request(params)
        @client.request(
          method: :post,
          path: ["monitor/%1$s/events", monitor_id],
          body: parsed,
          model: Deeprails::Models::MonitorSubmitEventResponse,
          options: options
        )
      end

      # @api private
      #
      # @param client [Deeprails::Client]
      def initialize(client:)
        @client = client
      end
    end
  end
end
