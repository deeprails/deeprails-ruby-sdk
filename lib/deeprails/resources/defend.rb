# frozen_string_literal: true

module Deeprails
  module Resources
    class Defend
      # Some parameter documentations has been truncated, see
      # {Deeprails::Models::DefendCreateWorkflowParams} for more details.
      #
      # Use this endpoint to create a new guardrail workflow with optional guardrail
      # thresholds and improvement actions
      #
      # @overload create_workflow(improvement_action:, metrics:, name:, type:, automatic_tolerance: nil, description: nil, max_retries: nil, request_options: {})
      #
      # @param improvement_action [Symbol, Deeprails::Models::DefendCreateWorkflowParams::ImprovementAction, nil] The action used to improve outputs that fail one or guardrail metrics for the wo
      #
      # @param metrics [Hash{Symbol=>Float}] Mapping of guardrail metrics to floating point threshold values. If the workflo
      #
      # @param name [String] Name of the workflow.
      #
      # @param type [Symbol, Deeprails::Models::DefendCreateWorkflowParams::Type] Type of thresholds to use for the workflow, either `automatic` or `custom`. Aut
      #
      # @param automatic_tolerance [Symbol, Deeprails::Models::DefendCreateWorkflowParams::AutomaticTolerance] Hallucination tolerance for automatic workflows; may be `low`, `medium`, or `hig
      #
      # @param description [String] Description for the workflow.
      #
      # @param max_retries [Integer] Max. number of improvement action retries until a given event passes the guardra
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::DefendResponse]
      #
      # @see Deeprails::Models::DefendCreateWorkflowParams
      def create_workflow(params)
        parsed, options = Deeprails::DefendCreateWorkflowParams.dump_request(params)
        @client.request(
          method: :post,
          path: "defend",
          body: parsed,
          model: Deeprails::DefendResponse,
          options: options
        )
      end

      # Use this endpoint to retrieve a specific event of a guardrail workflow
      #
      # @overload retrieve_event(event_id, workflow_id:, request_options: {})
      #
      # @param event_id [String] The ID of the requested workflow event.
      #
      # @param workflow_id [String] The ID of the workflow associated with the event.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::WorkflowEventResponse]
      #
      # @see Deeprails::Models::DefendRetrieveEventParams
      def retrieve_event(event_id, params)
        parsed, options = Deeprails::DefendRetrieveEventParams.dump_request(params)
        workflow_id =
          parsed.delete(:workflow_id) do
            raise ArgumentError.new("missing required path argument #{_1}")
          end
        @client.request(
          method: :get,
          path: ["defend/%1$s/events/%2$s", workflow_id, event_id],
          model: Deeprails::WorkflowEventResponse,
          options: options
        )
      end

      # Use this endpoint to retrieve the details for a specific defend workflow
      #
      # @overload retrieve_workflow(workflow_id, request_options: {})
      #
      # @param workflow_id [String] The ID of the workflow to retrieve.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::DefendResponse]
      #
      # @see Deeprails::Models::DefendRetrieveWorkflowParams
      def retrieve_workflow(workflow_id, params = {})
        @client.request(
          method: :get,
          path: ["defend/%1$s", workflow_id],
          model: Deeprails::DefendResponse,
          options: params[:request_options]
        )
      end

      # Some parameter documentations has been truncated, see
      # {Deeprails::Models::DefendSubmitEventParams} for more details.
      #
      # Use this endpoint to submit a model input and output pair to a workflow for
      # evaluation
      #
      # @overload submit_event(workflow_id, model_input:, model_output:, model_used:, run_mode:, nametag: nil, request_options: {})
      #
      # @param workflow_id [String] Workflow ID associated with this event.
      #
      # @param model_input [Deeprails::Models::DefendSubmitEventParams::ModelInput] A dictionary of inputs sent to the LLM to generate output. This must contain a
      #
      # @param model_output [String] Output generated by the LLM to be evaluated.
      #
      # @param model_used [String] Model ID used to generate the output, like `gpt-4o` or `o3`.
      #
      # @param run_mode [Symbol, Deeprails::Models::DefendSubmitEventParams::RunMode] Run mode for the workflow event. The run mode allows the user to optimize for s
      #
      # @param nametag [String] An optional, user-defined tag for the event.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::WorkflowEventResponse]
      #
      # @see Deeprails::Models::DefendSubmitEventParams
      def submit_event(workflow_id, params)
        parsed, options = Deeprails::DefendSubmitEventParams.dump_request(params)
        @client.request(
          method: :post,
          path: ["defend/%1$s/events", workflow_id],
          body: parsed,
          model: Deeprails::WorkflowEventResponse,
          options: options
        )
      end

      # Use this endpoint to update an existing guardrail workflow
      #
      # @overload update_workflow(workflow_id, description: nil, name: nil, request_options: {})
      #
      # @param workflow_id [String] The ID of the workflow to edit.
      #
      # @param description [String] Description for the workflow.
      #
      # @param name [String] Name of the workflow.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::DefendResponse]
      #
      # @see Deeprails::Models::DefendUpdateWorkflowParams
      def update_workflow(workflow_id, params = {})
        parsed, options = Deeprails::DefendUpdateWorkflowParams.dump_request(params)
        @client.request(
          method: :put,
          path: ["defend/%1$s", workflow_id],
          body: parsed,
          model: Deeprails::DefendResponse,
          options: options
        )
      end

      # @api private
      #
      # @param client [Deeprails::Client]
      def initialize(client:)
        @client = client
      end
    end
  end
end
