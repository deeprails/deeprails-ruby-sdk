# frozen_string_literal: true

module Deeprails
  module Resources
    class Evaluate
      # Some parameter documentations has been truncated, see
      # {Deeprails::Models::EvaluateCreateParams} for more details.
      #
      # Use this endpoint to evaluate a model's input and output pair against selected
      # guardrail metrics
      #
      # @overload create(model_input:, model_output:, run_mode:, guardrail_metrics: nil, model_used: nil, nametag: nil, request_options: {})
      #
      # @param model_input [Deeprails::Models::EvaluateCreateParams::ModelInput] A dictionary of inputs sent to the LLM to generate output. This must contain a
      #
      # @param model_output [String] Output generated by the LLM to be evaluated.
      #
      # @param run_mode [Symbol, Deeprails::Models::EvaluateCreateParams::RunMode] Run mode for the evaluation. The run mode allows the user to optimize for speed
      #
      # @param guardrail_metrics [Array<Symbol, Deeprails::Models::EvaluateCreateParams::GuardrailMetric>] An array of guardrail metrics that the model input and output pair will be evalu
      #
      # @param model_used [String] Model ID used to generate the output, like `gpt-4o` or `o3`.
      #
      # @param nametag [String] An optional, user-defined tag for the evaluation.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::Evaluation]
      #
      # @see Deeprails::Models::EvaluateCreateParams
      def create(params)
        parsed, options = Deeprails::EvaluateCreateParams.dump_request(params)
        @client.request(
          method: :post,
          path: "evaluate",
          body: parsed,
          model: Deeprails::Evaluation,
          options: options
        )
      end

      # Use this endpoint to retrieve the evaluation record for a given evaluation ID
      #
      # @overload retrieve(eval_id, request_options: {})
      #
      # @param eval_id [String] The ID of the evaluation to retrieve.
      #
      # @param request_options [Deeprails::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Deeprails::Models::Evaluation]
      #
      # @see Deeprails::Models::EvaluateRetrieveParams
      def retrieve(eval_id, params = {})
        @client.request(
          method: :get,
          path: ["evaluate/%1$s", eval_id],
          model: Deeprails::Evaluation,
          options: params[:request_options]
        )
      end

      # @api private
      #
      # @param client [Deeprails::Client]
      def initialize(client:)
        @client = client
      end
    end
  end
end
