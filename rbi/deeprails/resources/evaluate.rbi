# typed: strong

module Deeprails
  module Resources
    class Evaluate
      # Use this endpoint to evaluate a model's input and output pair against selected
      # guardrail metrics
      sig do
        params(
          model_input: Deeprails::EvaluateCreateParams::ModelInput::OrHash,
          model_output: String,
          run_mode: Deeprails::EvaluateCreateParams::RunMode::OrSymbol,
          guardrail_metrics:
            T::Array[
              Deeprails::EvaluateCreateParams::GuardrailMetric::OrSymbol
            ],
          model_used: String,
          nametag: String,
          request_options: Deeprails::RequestOptions::OrHash
        ).returns(Deeprails::Evaluation)
      end
      def create(
        # A dictionary of inputs sent to the LLM to generate output. This must contain a
        # `user_prompt` field and an optional `context` field. Additional properties are
        # allowed.
        model_input:,
        # Output generated by the LLM to be evaluated.
        model_output:,
        # Run mode for the evaluation. The run mode allows the user to optimize for speed,
        # accuracy, and cost by determining which models are used to evaluate the event.
        # Available run modes include `precision_plus`, `precision`, `smart`, and
        # `economy`. Defaults to `smart`.
        run_mode:,
        # An array of guardrail metrics that the model input and output pair will be
        # evaluated on. For non-enterprise users, these will be limited to the allowed
        # guardrail metrics.
        guardrail_metrics: nil,
        # Model ID used to generate the output, like `gpt-4o` or `o3`.
        model_used: nil,
        # An optional, user-defined tag for the evaluation.
        nametag: nil,
        request_options: {}
      )
      end

      # Use this endpoint to retrieve the evaluation record for a given evaluation ID
      sig do
        params(
          eval_id: String,
          request_options: Deeprails::RequestOptions::OrHash
        ).returns(Deeprails::Evaluation)
      end
      def retrieve(
        # The ID of the evaluation to retrieve.
        eval_id,
        request_options: {}
      )
      end

      # @api private
      sig { params(client: Deeprails::Client).returns(T.attached_class) }
      def self.new(client:)
      end
    end
  end
end
