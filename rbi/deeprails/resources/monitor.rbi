# typed: strong

module Deeprails
  module Resources
    class Monitor
      # Use this endpoint to create a new monitor to evaluate model inputs and outputs
      # using guardrails
      sig do
        params(
          name: String,
          description: String,
          request_options: Deeprails::RequestOptions::OrHash
        ).returns(Deeprails::APIResponse)
      end
      def create(
        # Name of the new monitor.
        name:,
        # Description of the new monitor.
        description: nil,
        request_options: {}
      )
      end

      # Use this endpoint to retrieve the details and evaluations associated with a
      # specific monitor
      sig do
        params(
          monitor_id: String,
          limit: Integer,
          request_options: Deeprails::RequestOptions::OrHash
        ).returns(Deeprails::Models::MonitorRetrieveResponse)
      end
      def retrieve(
        # The ID of the monitor to retrieve.
        monitor_id,
        # Limit the returned events associated with this monitor. Defaults to 10.
        limit: nil,
        request_options: {}
      )
      end

      # Use this endpoint to update the name, description, or status of an existing
      # monitor
      sig do
        params(
          monitor_id: String,
          description: String,
          monitor_status:
            Deeprails::MonitorUpdateParams::MonitorStatus::OrSymbol,
          name: String,
          request_options: Deeprails::RequestOptions::OrHash
        ).returns(Deeprails::APIResponse)
      end
      def update(
        # The ID of the monitor to edit.
        monitor_id,
        # Description of the monitor.
        description: nil,
        # Status of the monitor. Can be `active` or `inactive`. Inactive monitors no
        # longer record and evaluate events.
        monitor_status: nil,
        # Name of the monitor.
        name: nil,
        request_options: {}
      )
      end

      # Use this endpoint to submit a model input and output pair to a monitor for
      # evaluation
      sig do
        params(
          monitor_id: String,
          guardrail_metrics:
            T::Array[
              Deeprails::MonitorSubmitEventParams::GuardrailMetric::OrSymbol
            ],
          model_input: Deeprails::MonitorSubmitEventParams::ModelInput::OrHash,
          model_output: String,
          model_used: String,
          nametag: String,
          run_mode: Deeprails::MonitorSubmitEventParams::RunMode::OrSymbol,
          request_options: Deeprails::RequestOptions::OrHash
        ).returns(Deeprails::Models::MonitorSubmitEventResponse)
      end
      def submit_event(
        # The ID of the monitor associated with this event.
        monitor_id,
        # An array of guardrail metrics that the model input and output pair will be
        # evaluated on. For non-enterprise users, these will be limited to `correctness`,
        # `completeness`, `instruction_adherence`, `context_adherence`,
        # `ground_truth_adherence`, and/or `comprehensive_safety`.
        guardrail_metrics:,
        # A dictionary of inputs sent to the LLM to generate output. The dictionary must
        # contain at least one of `user_prompt` or `system_prompt`. For
        # ground_truth_aherence guadrail metric, `ground_truth` should be provided.
        model_input:,
        # Output generated by the LLM to be evaluated.
        model_output:,
        # Model ID used to generate the output, like `gpt-4o` or `o3`.
        model_used: nil,
        # An optional, user-defined tag for the event.
        nametag: nil,
        # Run mode for the monitor event. The run mode allows the user to optimize for
        # speed, accuracy, and cost by determining which models are used to evaluate the
        # event. Available run modes include `precision_plus`, `precision`, `smart`, and
        # `economy`. Defaults to `smart`.
        run_mode: nil,
        request_options: {}
      )
      end

      # @api private
      sig { params(client: Deeprails::Client).returns(T.attached_class) }
      def self.new(client:)
      end
    end
  end
end
