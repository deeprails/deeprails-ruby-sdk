# typed: strong

module Deeprails
  module Models
    class EvaluateCreateParams < Deeprails::Internal::Type::BaseModel
      extend Deeprails::Internal::Type::RequestParameters::Converter
      include Deeprails::Internal::Type::RequestParameters

      OrHash =
        T.type_alias do
          T.any(Deeprails::EvaluateCreateParams, Deeprails::Internal::AnyHash)
        end

      # A dictionary of inputs sent to the LLM to generate output. The dictionary must
      # contain at least `user_prompt` or `system_prompt` field. For
      # ground_truth_adherence guardrail metric, `ground_truth` should be provided.
      sig { returns(Deeprails::EvaluateCreateParams::ModelInput) }
      attr_reader :model_input

      sig do
        params(
          model_input: Deeprails::EvaluateCreateParams::ModelInput::OrHash
        ).void
      end
      attr_writer :model_input

      # Output generated by the LLM to be evaluated.
      sig { returns(String) }
      attr_accessor :model_output

      # Run mode for the evaluation. The run mode allows the user to optimize for speed,
      # accuracy, and cost by determining which models are used to evaluate the event.
      # Available run modes include `precision_plus`, `precision`, `smart`, and
      # `economy`. Defaults to `smart`.
      sig { returns(Deeprails::EvaluateCreateParams::RunMode::OrSymbol) }
      attr_accessor :run_mode

      # An array of guardrail metrics that the model input and output pair will be
      # evaluated on. For non-enterprise users, these will be limited to the allowed
      # guardrail metrics.
      sig do
        returns(
          T.nilable(
            T::Array[Deeprails::EvaluateCreateParams::GuardrailMetric::OrSymbol]
          )
        )
      end
      attr_reader :guardrail_metrics

      sig do
        params(
          guardrail_metrics:
            T::Array[Deeprails::EvaluateCreateParams::GuardrailMetric::OrSymbol]
        ).void
      end
      attr_writer :guardrail_metrics

      # Model ID used to generate the output, like `gpt-4o` or `o3`.
      sig { returns(T.nilable(String)) }
      attr_reader :model_used

      sig { params(model_used: String).void }
      attr_writer :model_used

      # An optional, user-defined tag for the evaluation.
      sig { returns(T.nilable(String)) }
      attr_reader :nametag

      sig { params(nametag: String).void }
      attr_writer :nametag

      sig do
        params(
          model_input: Deeprails::EvaluateCreateParams::ModelInput::OrHash,
          model_output: String,
          run_mode: Deeprails::EvaluateCreateParams::RunMode::OrSymbol,
          guardrail_metrics:
            T::Array[
              Deeprails::EvaluateCreateParams::GuardrailMetric::OrSymbol
            ],
          model_used: String,
          nametag: String,
          request_options: Deeprails::RequestOptions::OrHash
        ).returns(T.attached_class)
      end
      def self.new(
        # A dictionary of inputs sent to the LLM to generate output. The dictionary must
        # contain at least `user_prompt` or `system_prompt` field. For
        # ground_truth_adherence guardrail metric, `ground_truth` should be provided.
        model_input:,
        # Output generated by the LLM to be evaluated.
        model_output:,
        # Run mode for the evaluation. The run mode allows the user to optimize for speed,
        # accuracy, and cost by determining which models are used to evaluate the event.
        # Available run modes include `precision_plus`, `precision`, `smart`, and
        # `economy`. Defaults to `smart`.
        run_mode:,
        # An array of guardrail metrics that the model input and output pair will be
        # evaluated on. For non-enterprise users, these will be limited to the allowed
        # guardrail metrics.
        guardrail_metrics: nil,
        # Model ID used to generate the output, like `gpt-4o` or `o3`.
        model_used: nil,
        # An optional, user-defined tag for the evaluation.
        nametag: nil,
        request_options: {}
      )
      end

      sig do
        override.returns(
          {
            model_input: Deeprails::EvaluateCreateParams::ModelInput,
            model_output: String,
            run_mode: Deeprails::EvaluateCreateParams::RunMode::OrSymbol,
            guardrail_metrics:
              T::Array[
                Deeprails::EvaluateCreateParams::GuardrailMetric::OrSymbol
              ],
            model_used: String,
            nametag: String,
            request_options: Deeprails::RequestOptions
          }
        )
      end
      def to_hash
      end

      class ModelInput < Deeprails::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Deeprails::EvaluateCreateParams::ModelInput,
              Deeprails::Internal::AnyHash
            )
          end

        # The ground truth for evaluating Ground Truth Adherence guardrail.
        sig { returns(T.nilable(String)) }
        attr_reader :ground_truth

        sig { params(ground_truth: String).void }
        attr_writer :ground_truth

        # The system prompt used to generate the output.
        sig { returns(T.nilable(String)) }
        attr_reader :system_prompt

        sig { params(system_prompt: String).void }
        attr_writer :system_prompt

        # The user prompt used to generate the output.
        sig { returns(T.nilable(String)) }
        attr_reader :user_prompt

        sig { params(user_prompt: String).void }
        attr_writer :user_prompt

        # A dictionary of inputs sent to the LLM to generate output. The dictionary must
        # contain at least `user_prompt` or `system_prompt` field. For
        # ground_truth_adherence guardrail metric, `ground_truth` should be provided.
        sig do
          params(
            ground_truth: String,
            system_prompt: String,
            user_prompt: String
          ).returns(T.attached_class)
        end
        def self.new(
          # The ground truth for evaluating Ground Truth Adherence guardrail.
          ground_truth: nil,
          # The system prompt used to generate the output.
          system_prompt: nil,
          # The user prompt used to generate the output.
          user_prompt: nil
        )
        end

        sig do
          override.returns(
            { ground_truth: String, system_prompt: String, user_prompt: String }
          )
        end
        def to_hash
        end
      end

      # Run mode for the evaluation. The run mode allows the user to optimize for speed,
      # accuracy, and cost by determining which models are used to evaluate the event.
      # Available run modes include `precision_plus`, `precision`, `smart`, and
      # `economy`. Defaults to `smart`.
      module RunMode
        extend Deeprails::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, Deeprails::EvaluateCreateParams::RunMode)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        PRECISION_PLUS =
          T.let(
            :precision_plus,
            Deeprails::EvaluateCreateParams::RunMode::TaggedSymbol
          )
        PRECISION =
          T.let(
            :precision,
            Deeprails::EvaluateCreateParams::RunMode::TaggedSymbol
          )
        SMART =
          T.let(:smart, Deeprails::EvaluateCreateParams::RunMode::TaggedSymbol)
        ECONOMY =
          T.let(
            :economy,
            Deeprails::EvaluateCreateParams::RunMode::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[Deeprails::EvaluateCreateParams::RunMode::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      module GuardrailMetric
        extend Deeprails::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, Deeprails::EvaluateCreateParams::GuardrailMetric)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        CORRECTNESS =
          T.let(
            :correctness,
            Deeprails::EvaluateCreateParams::GuardrailMetric::TaggedSymbol
          )
        COMPLETENESS =
          T.let(
            :completeness,
            Deeprails::EvaluateCreateParams::GuardrailMetric::TaggedSymbol
          )
        INSTRUCTION_ADHERENCE =
          T.let(
            :instruction_adherence,
            Deeprails::EvaluateCreateParams::GuardrailMetric::TaggedSymbol
          )
        CONTEXT_ADHERENCE =
          T.let(
            :context_adherence,
            Deeprails::EvaluateCreateParams::GuardrailMetric::TaggedSymbol
          )
        GROUND_TRUTH_ADHERENCE =
          T.let(
            :ground_truth_adherence,
            Deeprails::EvaluateCreateParams::GuardrailMetric::TaggedSymbol
          )
        COMPREHENSIVE_SAFETY =
          T.let(
            :comprehensive_safety,
            Deeprails::EvaluateCreateParams::GuardrailMetric::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[
              Deeprails::EvaluateCreateParams::GuardrailMetric::TaggedSymbol
            ]
          )
        end
        def self.values
        end
      end
    end
  end
end
