module Deeprails
  module Models
    type monitor_submit_event_response =
      {
        success: bool,
        data: Deeprails::Models::MonitorSubmitEventResponse::Data,
        message: String
      }

    class MonitorSubmitEventResponse < Deeprails::Internal::Type::BaseModel
      attr_accessor success: bool

      attr_reader data: Deeprails::Models::MonitorSubmitEventResponse::Data?

      def data=: (
        Deeprails::Models::MonitorSubmitEventResponse::Data
      ) -> Deeprails::Models::MonitorSubmitEventResponse::Data

      attr_reader message: String?

      def message=: (String) -> String

      def initialize: (
        success: bool,
        ?data: Deeprails::Models::MonitorSubmitEventResponse::Data,
        ?message: String
      ) -> void

      def to_hash: -> {
        success: bool,
        data: Deeprails::Models::MonitorSubmitEventResponse::Data,
        message: String
      }

      type data =
        {
          evaluation_id: String,
          event_id: String,
          monitor_id: String,
          created_at: Time
        }

      class Data < Deeprails::Internal::Type::BaseModel
        attr_accessor evaluation_id: String

        attr_accessor event_id: String

        attr_accessor monitor_id: String

        attr_reader created_at: Time?

        def created_at=: (Time) -> Time

        def initialize: (
          evaluation_id: String,
          event_id: String,
          monitor_id: String,
          ?created_at: Time
        ) -> void

        def to_hash: -> {
          evaluation_id: String,
          event_id: String,
          monitor_id: String,
          created_at: Time
        }
      end
    end
  end
end
