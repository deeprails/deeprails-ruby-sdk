module Deeprails
  module Models
    type defend_response =
      {
        name: String,
        workflow_id: String,
        created_at: Time,
        description: String,
        improvement_action: Deeprails::Models::DefendResponse::improvement_action,
        max_improvement_attempts: Integer,
        modified_at: Time,
        status: Deeprails::Models::DefendResponse::status,
        success_rate: Float
      }

    class DefendResponse < Deeprails::Internal::Type::BaseModel
      attr_accessor name: String

      attr_accessor workflow_id: String

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader description: String?

      def description=: (String) -> String

      attr_reader improvement_action: Deeprails::Models::DefendResponse::improvement_action?

      def improvement_action=: (
        Deeprails::Models::DefendResponse::improvement_action
      ) -> Deeprails::Models::DefendResponse::improvement_action

      attr_reader max_improvement_attempts: Integer?

      def max_improvement_attempts=: (Integer) -> Integer

      attr_reader modified_at: Time?

      def modified_at=: (Time) -> Time

      attr_reader status: Deeprails::Models::DefendResponse::status?

      def status=: (
        Deeprails::Models::DefendResponse::status
      ) -> Deeprails::Models::DefendResponse::status

      attr_reader success_rate: Float?

      def success_rate=: (Float) -> Float

      def initialize: (
        name: String,
        workflow_id: String,
        ?created_at: Time,
        ?description: String,
        ?improvement_action: Deeprails::Models::DefendResponse::improvement_action,
        ?max_improvement_attempts: Integer,
        ?modified_at: Time,
        ?status: Deeprails::Models::DefendResponse::status,
        ?success_rate: Float
      ) -> void

      def to_hash: -> {
        name: String,
        workflow_id: String,
        created_at: Time,
        description: String,
        improvement_action: Deeprails::Models::DefendResponse::improvement_action,
        max_improvement_attempts: Integer,
        modified_at: Time,
        status: Deeprails::Models::DefendResponse::status,
        success_rate: Float
      }

      type improvement_action = :regen | :fixit | :do_nothing

      module ImprovementAction
        extend Deeprails::Internal::Type::Enum

        REGEN: :regen
        FIXIT: :fixit
        DO_NOTHING: :do_nothing

        def self?.values: -> ::Array[Deeprails::Models::DefendResponse::improvement_action]
      end

      type status = :inactive | :active

      module Status
        extend Deeprails::Internal::Type::Enum

        INACTIVE: :inactive
        ACTIVE: :active

        def self?.values: -> ::Array[Deeprails::Models::DefendResponse::status]
      end
    end
  end
end
