module Deeprails
  module Models
    type api_response =
      { success: bool, data: Deeprails::APIResponse::Data, message: String }

    class APIResponse < Deeprails::Internal::Type::BaseModel
      attr_accessor success: bool

      attr_reader data: Deeprails::APIResponse::Data?

      def data=: (Deeprails::APIResponse::Data) -> Deeprails::APIResponse::Data

      attr_reader message: String?

      def message=: (String) -> String

      def initialize: (
        success: bool,
        ?data: Deeprails::APIResponse::Data,
        ?message: String
      ) -> void

      def to_hash: -> {
        success: bool,
        data: Deeprails::APIResponse::Data,
        message: String
      }

      type data =
        {
          monitor_id: String,
          name: String,
          created_at: Time,
          description: String,
          monitor_status: Deeprails::Models::APIResponse::Data::monitor_status,
          updated_at: Time,
          user_id: String
        }

      class Data < Deeprails::Internal::Type::BaseModel
        attr_accessor monitor_id: String

        attr_accessor name: String

        attr_reader created_at: Time?

        def created_at=: (Time) -> Time

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader monitor_status: Deeprails::Models::APIResponse::Data::monitor_status?

        def monitor_status=: (
          Deeprails::Models::APIResponse::Data::monitor_status
        ) -> Deeprails::Models::APIResponse::Data::monitor_status

        attr_reader updated_at: Time?

        def updated_at=: (Time) -> Time

        attr_reader user_id: String?

        def user_id=: (String) -> String

        def initialize: (
          monitor_id: String,
          name: String,
          ?created_at: Time,
          ?description: String,
          ?monitor_status: Deeprails::Models::APIResponse::Data::monitor_status,
          ?updated_at: Time,
          ?user_id: String
        ) -> void

        def to_hash: -> {
          monitor_id: String,
          name: String,
          created_at: Time,
          description: String,
          monitor_status: Deeprails::Models::APIResponse::Data::monitor_status,
          updated_at: Time,
          user_id: String
        }

        type monitor_status = :active | :inactive

        module MonitorStatus
          extend Deeprails::Internal::Type::Enum

          ACTIVE: :active
          INACTIVE: :inactive

          def self?.values: -> ::Array[Deeprails::Models::APIResponse::Data::monitor_status]
        end
      end
    end
  end
end
