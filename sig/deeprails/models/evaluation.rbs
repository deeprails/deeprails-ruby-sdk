module Deeprails
  module Models
    type evaluation =
      {
        eval_id: String,
        evaluation_status: Deeprails::Models::Evaluation::evaluation_status,
        model_input: Deeprails::Evaluation::ModelInput,
        model_output: String,
        run_mode: Deeprails::Models::Evaluation::run_mode,
        created_at: Time,
        end_timestamp: Time,
        error_message: String,
        error_timestamp: Time,
        evaluation_result: ::Hash[Symbol, top],
        evaluation_total_cost: Float,
        guardrail_metrics: ::Array[Deeprails::Models::Evaluation::guardrail_metric],
        model_used: String,
        modified_at: Time,
        nametag: String,
        progress: Integer,
        start_timestamp: Time
      }

    class Evaluation < Deeprails::Internal::Type::BaseModel
      attr_accessor eval_id: String

      attr_accessor evaluation_status: Deeprails::Models::Evaluation::evaluation_status

      attr_accessor model_input: Deeprails::Evaluation::ModelInput

      attr_accessor model_output: String

      attr_accessor run_mode: Deeprails::Models::Evaluation::run_mode

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader end_timestamp: Time?

      def end_timestamp=: (Time) -> Time

      attr_reader error_message: String?

      def error_message=: (String) -> String

      attr_reader error_timestamp: Time?

      def error_timestamp=: (Time) -> Time

      attr_reader evaluation_result: ::Hash[Symbol, top]?

      def evaluation_result=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

      attr_reader evaluation_total_cost: Float?

      def evaluation_total_cost=: (Float) -> Float

      attr_reader guardrail_metrics: ::Array[Deeprails::Models::Evaluation::guardrail_metric]?

      def guardrail_metrics=: (
        ::Array[Deeprails::Models::Evaluation::guardrail_metric]
      ) -> ::Array[Deeprails::Models::Evaluation::guardrail_metric]

      attr_reader model_used: String?

      def model_used=: (String) -> String

      attr_reader modified_at: Time?

      def modified_at=: (Time) -> Time

      attr_reader nametag: String?

      def nametag=: (String) -> String

      attr_reader progress: Integer?

      def progress=: (Integer) -> Integer

      attr_reader start_timestamp: Time?

      def start_timestamp=: (Time) -> Time

      def initialize: (
        eval_id: String,
        evaluation_status: Deeprails::Models::Evaluation::evaluation_status,
        model_input: Deeprails::Evaluation::ModelInput,
        model_output: String,
        run_mode: Deeprails::Models::Evaluation::run_mode,
        ?created_at: Time,
        ?end_timestamp: Time,
        ?error_message: String,
        ?error_timestamp: Time,
        ?evaluation_result: ::Hash[Symbol, top],
        ?evaluation_total_cost: Float,
        ?guardrail_metrics: ::Array[Deeprails::Models::Evaluation::guardrail_metric],
        ?model_used: String,
        ?modified_at: Time,
        ?nametag: String,
        ?progress: Integer,
        ?start_timestamp: Time
      ) -> void

      def to_hash: -> {
        eval_id: String,
        evaluation_status: Deeprails::Models::Evaluation::evaluation_status,
        model_input: Deeprails::Evaluation::ModelInput,
        model_output: String,
        run_mode: Deeprails::Models::Evaluation::run_mode,
        created_at: Time,
        end_timestamp: Time,
        error_message: String,
        error_timestamp: Time,
        evaluation_result: ::Hash[Symbol, top],
        evaluation_total_cost: Float,
        guardrail_metrics: ::Array[Deeprails::Models::Evaluation::guardrail_metric],
        model_used: String,
        modified_at: Time,
        nametag: String,
        progress: Integer,
        start_timestamp: Time
      }

      type evaluation_status =
        :in_progress | :completed | :canceled | :queued | :failed

      module EvaluationStatus
        extend Deeprails::Internal::Type::Enum

        IN_PROGRESS: :in_progress
        COMPLETED: :completed
        CANCELED: :canceled
        QUEUED: :queued
        FAILED: :failed

        def self?.values: -> ::Array[Deeprails::Models::Evaluation::evaluation_status]
      end

      type model_input = { user_prompt: String, context: String }

      class ModelInput < Deeprails::Internal::Type::BaseModel
        attr_accessor user_prompt: String

        attr_reader context: String?

        def context=: (String) -> String

        def initialize: (user_prompt: String, ?context: String) -> void

        def to_hash: -> { user_prompt: String, context: String }
      end

      type run_mode = :precision_plus | :precision | :smart | :economy

      module RunMode
        extend Deeprails::Internal::Type::Enum

        PRECISION_PLUS: :precision_plus
        PRECISION: :precision
        SMART: :smart
        ECONOMY: :economy

        def self?.values: -> ::Array[Deeprails::Models::Evaluation::run_mode]
      end

      type guardrail_metric =
        :correctness
        | :completeness
        | :instruction_adherence
        | :context_adherence
        | :ground_truth_adherence
        | :comprehensive_safety

      module GuardrailMetric
        extend Deeprails::Internal::Type::Enum

        CORRECTNESS: :correctness
        COMPLETENESS: :completeness
        INSTRUCTION_ADHERENCE: :instruction_adherence
        CONTEXT_ADHERENCE: :context_adherence
        GROUND_TRUTH_ADHERENCE: :ground_truth_adherence
        COMPREHENSIVE_SAFETY: :comprehensive_safety

        def self?.values: -> ::Array[Deeprails::Models::Evaluation::guardrail_metric]
      end
    end
  end
end
